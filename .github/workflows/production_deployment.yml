name: Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      issues: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Run Database Migrations
        run: npm run db:migrate
        env:
          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Set Vercel Environment Variables
        uses: dkershner6/vercel-set-env-action@v3
        with:
          token: ${{ secrets.VERCEL_API_TOKEN }}
          projectName: pve-system
          envVariableKeys: POSTGRES_URL,POSTGRES_USER,POSTGRES_HOST,POSTGRES_PASSWORD,POSTGRES_DATABASE,BLOB_READ_WRITE_TOKEN,VERCEL_SUBDOMAIN,MAILGUN_API_KEY,DOMAIN,RESEND_API_KEY
        env:
          # Postgres Variables
          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
          TARGET_POSTGRES_URL: production
          TYPE_POSTGRES_URL: plain

          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          TARGET_POSTGRES_USER: production
          TYPE_POSTGRES_USER: plain

          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          TARGET_POSTGRES_HOST: production
          TYPE_POSTGRES_HOST: plain

          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TARGET_POSTGRES_PASSWORD: production
          TYPE_POSTGRES_PASSWORD: encrypted

          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
          TARGET_POSTGRES_DATABASE: production
          TYPE_POSTGRES_DATABASE: plain

          # Other Variables
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
          TARGET_BLOB_READ_WRITE_TOKEN: production
          TYPE_BLOB_READ_WRITE_TOKEN: encrypted

          VERCEL_SUBDOMAIN: ${{ secrets.VERCEL_SUBDOMAIN }}
          TARGET_VERCEL_SUBDOMAIN: production
          TYPE_VERCEL_SUBDOMAIN: plain

          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          TARGET_MAILGUN_API_KEY: production
          TYPE_MAILGUN_API_KEY: encrypted

          DOMAIN: ${{ secrets.DOMAIN }}
          TARGET_DOMAIN: production
          TYPE_DOMAIN: plain

          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          TARGET_RESEND_API_KEY: production
          TYPE_RESEND_API_KEY: encrypted

      - name: Deploy to Production
        id: deploy
        run: |
          # Primeiro, garantir que temos as configurações do projeto
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_API_TOKEN }}

          # Definir a URL de produção fixa
          echo "deployment_url=https://pve-system.vercel.app" >> $GITHUB_OUTPUT

          # Fazer o build e deploy
          vercel build --prod --token=${{ secrets.VERCEL_API_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_API_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Create GitHub Deployment
        if: success()
        uses: actions/github-script@v6
        env:
          DEPLOY_URL: ${{ steps.deploy.outputs.deployment_url }}
        with:
          script: |
            const date = new Date().toISOString();

            // Criar deployment
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'Production',
              auto_merge: false,
              required_contexts: []
            });

            // Atualizar status do deployment
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: process.env.DEPLOY_URL || `https://${process.env.VERCEL_SUBDOMAIN}.vercel.app`,
              description: '✅ Production deployment successful',
              auto_inactive: true
            });

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { sha } = context;
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `⚠️ Production Deployment Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## ❌ Production Deployment Failed
              
              ### Details
              - **Commit**: ${sha}
              - **Workflow Run**: [View Details](${runUrl})
              - **Date**: ${new Date().toISOString()}
              
              Please check the workflow logs for more details on the failure.
              
              [View Workflow Logs](${runUrl})`
            });
